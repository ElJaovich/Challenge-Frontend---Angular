{"ast":null,"code":"import _asyncToGenerator from \"/home/jawich/projects/Challenge-Frontend-Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpServiceService {\n  constructor(http) {\n    this.http = http;\n    this.options = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n\n  get(endpoint) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const url = endpoint;\n      let res;\n\n      try {\n        res = yield lastValueFrom(_this.http.get(url, _this.options));\n        console.log(url, res);\n      } catch (err) {\n        console.log('ERROR: ', err);\n      }\n\n      return res;\n    })();\n  }\n\n  post(endpoint, param) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const url = endpoint;\n      let res;\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'top-end',\n        showConfirmButton: false,\n        timer: 3000,\n        timerProgressBar: true,\n        didOpen: toast => {\n          toast.addEventListener('mouseenter', Swal.stopTimer);\n          toast.addEventListener('mouseleave', Swal.resumeTimer);\n        }\n      });\n\n      try {\n        res = yield lastValueFrom(_this2.http.post(url, param, _this2.options));\n      } catch (err) {\n        const error = {\n          err\n        };\n        Toast.fire({\n          icon: 'error',\n          title: 'Error!',\n          text: `${error.err.name}`\n        });\n        console.log('Error!: ', error);\n      }\n\n      return res;\n    })();\n  }\n\n}\n\nHttpServiceService.ɵfac = function HttpServiceService_Factory(t) {\n  return new (t || HttpServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nHttpServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpServiceService,\n  factory: HttpServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/jawich/projects/Challenge-Frontend-Angular/src/app/services/http-service.service.ts"],"names":["HttpHeaders","lastValueFrom","Swal","i0","i1","HttpServiceService","constructor","http","options","headers","get","endpoint","url","res","console","log","err","post","param","Toast","mixin","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","addEventListener","stopTimer","resumeTimer","error","fire","icon","title","text","name","ɵfac","HttpServiceService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpServiceService {\n    constructor(http) {\n        this.http = http;\n        this.options = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n            })\n        };\n    }\n    async get(endpoint) {\n        const url = endpoint;\n        let res;\n        try {\n            res = await lastValueFrom(this.http.get(url, this.options));\n            console.log(url, res);\n        }\n        catch (err) {\n            console.log('ERROR: ', err);\n        }\n        return res;\n    }\n    async post(endpoint, param) {\n        const url = endpoint;\n        let res;\n        const Toast = Swal.mixin({\n            toast: true,\n            position: 'top-end',\n            showConfirmButton: false,\n            timer: 3000,\n            timerProgressBar: true,\n            didOpen: (toast) => {\n                toast.addEventListener('mouseenter', Swal.stopTimer);\n                toast.addEventListener('mouseleave', Swal.resumeTimer);\n            }\n        });\n        try {\n            res = await lastValueFrom(this.http.post(url, param, this.options));\n        }\n        catch (err) {\n            const error = { err };\n            Toast.fire({\n                icon: 'error',\n                title: 'Error!',\n                text: `${error.err.name}`\n            });\n            console.log('Error!: ', error);\n        }\n        return res;\n    }\n}\nHttpServiceService.ɵfac = function HttpServiceService_Factory(t) { return new (t || HttpServiceService)(i0.ɵɵinject(i1.HttpClient)); };\nHttpServiceService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HttpServiceService, factory: HttpServiceService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}